import{o as n,c as a,a as s}from"./app.1afa152c.js";const t='{"title":"Guide","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"Usage","slug":"usage"},{"level":3,"title":"Creating a custom component","slug":"creating-a-custom-component"},{"level":3,"title":"Use the custom component","slug":"use-the-custom-component"},{"level":2,"title":"Lazy value binding","slug":"lazy-value-binding"},{"level":2,"title":"External props changes","slug":"external-props-changes"}],"relativePath":"guide.md","lastUpdated":1624748680731}',p={},e=s('<h1 id="guide"><a class="header-anchor" href="#guide" aria-hidden="true">#</a> Guide</h1><div class="warning custom-block"><p class="custom-block-title">Version</p><p>Youâ€™re browsing the documentation for v2.x. <a href="https://vue-currency-input-v1.netlify.app/" target="_blank" rel="noopener noreferrer">For v1.x, click here</a>.</p></div><h2 id="introduction"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Vue Currency Input allows an easy input of currency formatted numbers. Powered by the <a href="https://v3.vuejs.org/guide/composition-api-introduction.html" target="_blank" rel="noopener noreferrer">Vue Composition API</a>, it provides a Vue composable for decorating input components with currency format capabilities.</p><h2 id="installation"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Install the npm package:</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> vue-currency-input\n</code></pre></div><p>For usage with Vue 2 you have to install also the Vue Composition API plugin:</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> @vue/composition-api\n</code></pre></div><p>In Vue CLI projects, make sure that <a href="https://cli.vuejs.org/config/#transpiledependencies" target="_blank" rel="noopener noreferrer">the dependency is transpiled with Babel</a>, since the library is compiled to the latest ECMAScript Version (ES2020).</p><p>Example <code>vue.config.js</code>:</p><div class="language-js"><pre><code><span class="token comment">/**\n * @type {import(&#39;@vue/cli-service&#39;).ProjectOptions}\n */</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  transpileDependencies<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&#39;vue-currency-input&#39;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="usage"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Vue Currency Input does not provide a ready-to-use component, instead it enables you to create your own based on your favorite input component (for example <a href="https://vuetifyjs.com/en/components/text-fields/" target="_blank" rel="noopener noreferrer">Vuetify</a>, <a href="https://quasar.dev/vue-components/input" target="_blank" rel="noopener noreferrer">Quasar</a> or <a href="https://element.eleme.io/#/en-US/component/input" target="_blank" rel="noopener noreferrer">Element</a>).</p><h3 id="creating-a-custom-component"><a class="header-anchor" href="#creating-a-custom-component" aria-hidden="true">#</a> Creating a custom component</h3><p>The following example component <code>&lt;currency-input&gt;</code> uses a simple HTML input element:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> \n    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputRef<span class="token punctuation">&quot;</span></span> \n    <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>formattedValue<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> useCurrencyInput <span class="token keyword">from</span> <span class="token string">&#39;vue-currency-input&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;CurrencyInput&#39;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    modelValue<span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token comment">// Vue 2: value</span>\n    options<span class="token operator">:</span> Object\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> formattedValue<span class="token punctuation">,</span> inputRef <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCurrencyInput</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>options<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> inputRef<span class="token punctuation">,</span> formattedValue <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">Component Props</p><p>The component should provide props for the <code>v-model</code> value binding, and the options (see <a href="./config.html">Config Reference</a>).</p></div><div class="warning custom-block"><p class="custom-block-title">Input Type</p><p>Make sure, that the input element has type <code>text</code> (or omit the type since it&#39;s the default).</p></div><h3 id="use-the-custom-component"><a class="header-anchor" href="#use-the-custom-component" aria-hidden="true">#</a> Use the custom component</h3><p>Now you can use the created <code>&lt;currency-input&gt;</code> component in your app:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>currency-input</span> \n    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span> \n    <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ currency: <span class="token punctuation">&#39;</span>EUR<span class="token punctuation">&#39;</span> }<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> CurrencyInput <span class="token keyword">from</span> <span class="token string">&#39;./CurrencyInput&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> CurrencyInput <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token number">1234</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n</code></pre></div><p>See the final result in the <a href="./examples.html#simple-html-input-element">examples</a>.</p><h2 id="lazy-value-binding"><a class="header-anchor" href="#lazy-value-binding" aria-hidden="true">#</a> Lazy value binding</h2><p>Sometimes you might want to update the bound value only when the input loses its focus. In this case, use <code>v-model.lazy</code> for Vue 3:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>currency-input</span>\n  <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ currency: <span class="token punctuation">&#39;</span>EUR<span class="token punctuation">&#39;</span> }<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre></div><p>For Vue 2 listen to the <code>change</code> event instead of using <code>v-model</code>, since the <code>lazy</code> modifier is not supported when using <code>v-model</code> on custom components:</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>currency-input</span>\n  <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ currency: <span class="token punctuation">&#39;</span>EUR<span class="token punctuation">&#39;</span> }<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>value = $event<span class="token punctuation">&quot;</span></span>\n<span class="token punctuation">/&gt;</span></span>\n</code></pre></div><h2 id="external-props-changes"><a class="header-anchor" href="#external-props-changes" aria-hidden="true">#</a> External props changes</h2><p>If the value of the input is changed externally (and not only by user input) you need to use the <code>setValue</code> function returned by <code>useCurrencyInput</code> within a watcher.</p><p>The same applies for the options of your currency input component. Use the <code>setOptions</code> function in a watcher in order to make the options reactive for changes after the component has been mounted (like in the <a href="./playground.html">Playground</a>).</p><div class="language-vue"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> \n    <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputRef<span class="token punctuation">&quot;</span></span> \n    <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>formattedValue<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span> <span class="token comment">// Vue 2: import { watch } from &#39;@vue/composition-api&#39; </span>\n<span class="token keyword">import</span> useCurrencyInput <span class="token keyword">from</span> <span class="token string">&#39;vue-currency-input&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;CurrencyInput&#39;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">{</span>\n    modelValue<span class="token operator">:</span> Number<span class="token punctuation">,</span> <span class="token comment">// Vue 2: value</span>\n    options<span class="token operator">:</span> Object\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>\n      inputRef<span class="token punctuation">,</span>\n      formattedValue<span class="token punctuation">,</span>\n      setOptions<span class="token punctuation">,</span>\n      setValue\n    <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCurrencyInput</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>options<span class="token punctuation">)</span>\n\n    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>modelValue<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// Vue 2: props.value</span>\n      <span class="token function">setValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">setOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> inputRef<span class="token punctuation">,</span> formattedValue <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',32);p.render=function(s,t,p,o,c,u){return n(),a("div",null,[e])};export default p;export{t as __pageData};
